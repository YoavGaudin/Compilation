/* Reverse polish notation calculator.  */
%{
  //#define __cplusplus 1
  #include <iostream>
  #include <string>
  #include "helper_files/part2_helpers.h"

  using namespace std;

  int yylex (void);
  void yyerror (char const *);
  
  ParserNode *parseTree;
%}

%token NUM 
%token Defstruct Extern Main Var Integer Real If Then Else While Do Return Write Read Call
%token ID
%token STRING

%left ADD_OP MUL_OP AND_OP OR_OP REL_OP
%right ASSIGN_OP NOT_OP

%%

PROGRAM: 
		TDEFS FDEFS MAIN_FUNCTION {
			parseTree = makeNode("PROGRAM", NULL, $1);
			$$ = parseTree;
			concatList($$, $2);
			concatList($$, $3);
		}

TDEFS: 
		TDEFS Defstruct '{' DECLARLIST '}' ID ';' {
			$$ = makeNode("TDEFS", NULL, $1);
			concatList($$, $2);
			concatList($$, makeNode("{", NULL, NULL));
			concatList($$, $4);
			concatList($$, makeNode("}", NULL, NULL));
			concatList($$, $6);
			concatList($$, makeNode(";", NULL, NULL));
		}		
	|
		/*epsilon*/
		
FDEFS: 
		FDEFS TYPE ID '(' FUNC_ARGLIST_FULL ')' BLK {
			$$ = makeNode("FDEFS", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
			concatList($$, makeNode("(", NULL, NULL));
			concatList($$, $5);
			concatList($$, makeNode(")", NULL, NULL));
			concatList($$, $7);
			
		}
	|
		FDEFS Extern TYPE ID '(' FUNC_ARGLIST_FULL ')' ';' {
			$$ = makeNode("FDEFS", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
			concatList($$, $4);
			concatList($$, makeNode("(", NULL, NULL));
			concatList($$, $6);
			concatList($$, makeNode(")", NULL, NULL));
			concatList($$, makeNode(";", NULL, NULL));
		}		
	|
		/*epsilon*/

FUNC_ARGLIST_FULL: 
		FUNC_ARGLIST {
			$$ = makeNode("FUNC_ARGLIST_FULL", NULL, $1);
		}
	|
		/*epsilon*/
		
FUNC_ARGLIST: 
		FUNC_ARGLIST ',' DCL {
			$$ = makeNode("FUNC_ARGLIST", NULL, $1);
			concatList($$, makeNode(",", NULL, NULL));
			concatList($$, $3);
		}
	|
		DCL {
			$$ = makeNode("FUNC_ARGLIST", NULL, $1);
		}
		
MAIN_FUNCTION:
		Main BLK {
			$$ = makeNode("MAIN_FUNCTION", NULL, makeNode("Main", NULL, NULL));
			concatList($$, $2);
		} 
	|
		/*epsilon*/
		
BLK: 
		DECLARATIONS '{' LIST '}' {
			$$ = makeNode("BLK", NULL, $1);
			concatList($$, makeNode("{", NULL, NULL));
			concatList($$, $3);
			concatList($$, makeNode("}", NULL, NULL));
		}
	
DECLARATIONS:
		Var DECLARLIST  {
			$$ = makeNode("DECLARATIONS", NULL, $1);
			concatList($$, $2);
		}
	|
		/*epsilon*/
		
DECLARLIST:
		DECLARLIST DCL ';' {
			$$ = makeNode("DECLARLIST", NULL, $1);
			concatList($$, $2);
			concatList($$, makeNode(";", NULL, NULL));
		}
	|
		DCL ';' {
			$$ = makeNode("DECLARLIST", NULL, $1);
			concatList($$, makeNode(";", NULL, NULL));
		}
		
DCL: 
		ID ':' TYPE {
			$$ = makeNode("DCL", NULL, makeNode("ID", $1->value, NULL));
			concatList($$, makeNode(":", NULL, NULL));
			concatList($$, $3);
		} 
	|
		ID ':' ID {
			$$ = makeNode("DCL", NULL, makeNode("ID", $1->value, NULL));
			concatList($$, makeNode(":", NULL, NULL));
			concatList($$, $3);
		} 
	|
		ID ',' DCL {
			$$ = makeNode("DCL", NULL, makeNode("ID", $1->value, NULL));
			concatList($$, makeNode(":", NULL, NULL));
			concatList($$, $3);
		}
	
TYPE: 
		Integer {
			$$ = makeNode("TYPE", NULL, $1);
		}
	|
		Real {
			$$ = makeNode("TYPE", NULL, $1);
		}
	
LIST: 
		LIST STMT {
			$$ = makeNode("LIST", NULL, $1);
			concatList($$, $2);
		}
	|
		/*epsilon*/
	
STMT: 
		ASSN {
			$$ = makeNode("STMT", NULL, $1);
		}
	|
		CNTRL {
			$$ = makeNode("STMT", NULL, $1);
		}
	|
		READ {
			$$ = makeNode("STMT", NULL, $1);
		}
	|
		WRITE {
			$$ = makeNode("STMT", NULL, $1);
		}
	|
		STMT_RETURN {
			$$ = makeNode("STMT", NULL, $1);
		}
	|
		BLK {
			$$ = makeNode("STMT", NULL, $1);
		}
	
STMT_RETURN: 
		Return '(' EXP ')' ';' {
			$$ = makeNode("STMT_RETURN", NULL, $1);
			concatList($$, makeNode("(", NULL, NULL));
			concatList($$, $3);
			concatList($$, makeNode(")", NULL, NULL));
			concatList($$, makeNode(";", NULL, NULL));
		}
	
WRITE: 
		Write '(' EXP ')' ';' {
			$$ = makeNode("WRITE", NULL, $1);
			concatList($$, makeNode("(", NULL, NULL));	
			concatList($$, $3);
			concatList($$, makeNode(")", NULL, NULL));
			concatList($$, makeNode(";", NULL, NULL));
		}
	|
		Write '(' STRING ')' ';' {
			$$ = makeNode("WRITE", NULL, $1);
			concatList($$, makeNode("(", NULL, NULL));
			concatList($$, $3);
			concatList($$, makeNode(")", NULL, NULL));
			concatList($$, makeNode(";", NULL, NULL));
		}
	
READ: 
		Read '(' LVAL ')' ';' {
			$$ = makeNode("READ", NULL, $1);
			concatList($$, makeNode("(", NULL, NULL));	
		}
	
ASSN: 
		LVAL ASSIGN_OP EXP ';' {
			$$ = makeNode("ASSN", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
			concatList($$, makeNode(";", NULL, NULL));
		}

LVAL: 
		ID {
			$$ = makeNode("LVAL", NULL, $1);
		}
	|
		STREF {
			$$ = makeNode("LVAL", NULL, $1);
		}
CNTRL: 
		If BEXP Then STMT Else STMT {
			$$ = makeNode("CNTRL", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
			concatList($$, $4);
			concatList($$, $5);
			concatList($$, $6);
		}
	|
		If BEXP Then STMT {
			$$ = makeNode("CNTRL", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
			concatList($$, $4);
		}
	|
		While BEXP Do STMT {
			$$ = makeNode("CNTRL", NULL, makeNode("while", NULL, NULL));
			concatList($$, $2);
			concatList($$, $3);
			concatList($$, $4);
		}
	
BEXP: 
		BEXP OR_OP BEXP {
			$$ = makeNode("BEXP", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
		}
	|
		BEXP AND_OP BEXP {
			$$ = makeNode("BEXP", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
		}
	|
		NOT_OP BEXP {
			$$ = makeNode("BEXP", NULL, $1);
			concatList($$, $2);
		}
	|
		EXP REL_OP EXP {
			$$ = makeNode("BEXP", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
		}
	|
		'(' BEXP ')' {
			$$ = makeNode("BEXP", NULL, makeNode("(", NULL, NULL));
			concatList($$, $2);
			concatList($$, makeNode(")", NULL, NULL));
		}
	
EXP: 
		EXP ADD_OP EXP {
			$$ = makeNode("EXP", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
		}
	|
		EXP MUL_OP EXP {
			$$ = makeNode("EXP", NULL, $1);
			concatList($$, $2);
			concatList($$, $3);
		}
	|
		'(' EXP ')' {
			$$ = makeNode("EXP", NULL, makeNode("(", NULL, NULL));
			concatList($$, $2);
			concatList($$, makeNode(")", NULL, NULL));
		}
	|
		'(' TYPE ')' EXP {
			$$ = makeNode("EXP", NULL, makeNode("(", NULL, NULL));
			concatList($$, $2);
			concatList($$, makeNode(")", NULL, NULL));
			concatList($$, $4);
		}
	|
		ID {
			$$ = makeNode("EXP", NULL, $1);
		}
	|
		STREF {
			$$ = makeNode("EXP", NULL, $1);
		}
	|
		NUM {
			$$ = makeNode("EXP", NULL, $1);
		}
	|
		CALL {
			$$ = makeNode("EXP", NULL, $1);
		}
	
STREF: 
		ID '[' ID ']' {
			$$ = makeNode("STREF", NULL, $1);
			concatList($$, makeNode("[", NULL, NULL));
			concatList($$, makeNode("ID", $3->value, NULL));
			concatList($$, makeNode("]", NULL, NULL));
		}
	|
		STREF '[' ID ']' {
			$$ = makeNode("STREF", NULL, $1);
			concatList($$, makeNode("[", NULL, NULL));
			concatList($$, $3);
			concatList($$, makeNode("]", NULL, NULL));
		}
	
CALL: 
		Call ID '(' CALL_ARGS_FULL ')' {
			$$ = makeNode("CALL", NULL, $1);
			concatList($$, $2);
			concatList($$, makeNode("(", NULL, NULL));
			concatList($$, $4);
			concatList($$, makeNode(")", NULL, NULL));
		}
	
CALL_ARGS_FULL: 
		CALL_ARGS {
			$$ = makeNode("CALL_ARGS_FULL", NULL, $1);
		}
	|
		/*epsilon*/
	
CALL_ARGS:
		EXP {
			$$ = makeNode("CALL_ARGS", NULL, $1);
		}
	|
		CALL_ARGS ',' EXP {
			$$ = makeNode("CALL_ARGS", NULL, $1);
			concatList($$, makeNode(",", NULL, NULL));
			concatList($$, $3);
		}
	
%%
