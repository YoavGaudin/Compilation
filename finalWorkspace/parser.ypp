/* Reverse polish notation calculator.  */
%{
  #include <stdio.h>
  #include <iostream>
  #include <algorithm>
  #include "newParser.hpp"
  
  using namespace std;
  
  int yylex (void);
  extern char* yytext;
  extern int yylineno;
  void yyerror (char const *);
  void semanticError(string s);
%}

%token NUM 
%token Defstruct Extern Main Var Integer Real If Then While Do Return Write Read Call
%token Else 
%token ID
%token STRING
%token ',' ';' ':'

%right ASSIGN
%left OR_OP
%left AND_OP
%left REL_OP
%left ADD_OP
%left MUL_OP
%right NOT_OP
%right ']' '}' ')'
%left '[' '{' '('

 //%right If Then Else
%%

PROGRAM: 
		M_program { emit("UJUMP 0"); } TDEFS FDEFS MAIN_FUNCTION {
		  emit("HALT");
		  if(stoi($5.place) > 0){
		    codeBuffer[0] = "UJUMP " + $5.place;
		  }
		  cout << "<\\PROGRAM>" << endl;
		}
;
TDEFS: 
		TDEFS Defstruct '{' DECLARLIST '}' ID ';' {
		  cout << "<TDEFS>" << endl;
		  for(std::list<string>::iterator i = $4.typesList.begin(); i != $4.typesList.end(); ++i) {
		    cout << *i << endl;
		  }
		  if((std::find($4.typesList.begin(), $4.typesList.end(), $6.tokenValue) != $4.typesList.end()))
		    semanticError("struct can not contain field of his self type");
		  addToStructTypeTable($6.tokenValue, $4.typedefList);
		  cout << "<\\TDEFS>" << endl;
		}		
	|
		/*epsilon*/ { cout << "TDEFS to epsilon" << endl; }
;		
FDEFS: 
		FDEFS TYPE ID '(' FUNC_ARGLIST_FULL ')'
		{
		  currFunction = new Function($3.tokenValue, $2.tokenValue, true, $5.argsList);
		  currFunction->printSymbolTable();
		  currFunction->address =  nextquad();
		  currBlock = currFunction;
		} BLK {
		  cout << "<FDEFS 1>" << endl;
		  cout << "\t" << $3.tokenValue << endl;
		  // execute RETRN in any case (function might have ended without return
		  emit("RETRN");
		  funcSymbols.insert(std::pair<string, Function>($3.tokenValue, *currFunction));

		  backpatch($8.nextList, nextquad());
		  
		  cout << "<\\FDEFS 1>" << endl;
		}
	|
		FDEFS Extern TYPE ID '(' FUNC_ARGLIST_FULL ')' ';' {
		  cout << "<FDEFS 2>" << endl;
		  Function* func = new Function($4.tokenValue, $3.tokenValue, false, $6.argsList);
		  func->address = 0; // illeagal address for unimplemeted functions
		  funcSymbols.insert(std::pair<string, Function>($4.tokenValue, *func));
		  cout << "<\\FDEFS 2>" << endl;
		}		
	|
		/*epsilon*/ { 
		  cout << "FDEFS to epsilon" << endl; 
		}
;
FUNC_ARGLIST_FULL: 
		FUNC_ARGLIST {
		  $$.argsList = $1.argsList;
		}
	|
		/*epsilon*/ {}
;		
FUNC_ARGLIST: 
		FUNC_ARGLIST ',' DCL {
		  createArgumentsFromDCL(&$3, &$1);
		  $$.argsList = $1.argsList;
		}
	|
		DCL {
		  createArgumentsFromDCL(&$1, &$$);
		}
;
MAIN_FUNCTION:
                M_main Main {
		  //cout << "<MAIN_FUNCTION>" <<endl;
		  currFunction = new Function("main");
		  currFunction->address =  nextquad();
		  currBlock = currFunction;
		  // initiate stack pointer and frame pointer
		  emit("COPYI I1 999");
		  emit("COPYI I2 999");
		} BLK {
		  funcSymbols.insert(std::pair<string, Function>("main", *currFunction));
		  /* TODO: is it redundant? with this line the my_course.cmm falls.
		     I think no one in the main BLK needs to know the BLK's context.*/
		  //backpatch($4.nextList, nextquad());
		  cout << "<\\MAIN_FUNCTION>" <<endl;
		  $$.place = to_string(currFunction->address);
		} 
	|
		/*epsilon*/ {
		  $$.place = "0";
		  cout << "MAIN_FUNCTION to epsilon" << endl;
		}
;		
BLK: 
        M_blk DECLARATIONS {
		  $$.declarationList = $2.declarationList;
<<<<<<< HEAD
		  currBlock = new Block(currBlock);
		  // add declerations to current block
		  currBlock->printSymbolTable();
		  currBlock->insertSymbolTable($2.declarationList);
=======
		  printDeclarationList($2.declarationList);
		  currBlock = new Block(currBlock);
		  // add declerations to current block
		  currBlock->printSymbolTable();
		  cout << "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^" << endl;
		  currBlock->insertSymbolTable($$.declarationList);
>>>>>>> 68f75fe3dd07b5ab2a8b524a98a25cf4495ccd4a
		  currBlock->printSymbolTable();
		  emit("SUBTI I1 I1 " + to_string(currBlock->offset));
		} '{' LIST M '}' {
		  backpatch($5.nextList, $6.quad);
		  //$5.declarationList = $2.declarationList;
		  cout << "<\\BLK>" << endl;
		}
;	
DECLARATIONS:
		Var DECLARLIST {
		  cout << "<DECLARATIONS>" << endl;
		  $$.declarationList = $2.declarationList;
		  cout << "<\\DECLARATIONS>" << endl;
		}
	|
		/*epsilon*/ {
		  cout << "DECLARATIONS to epsilon" << endl;
		  $$.declarationList.clear();
		}
;		
DECLARLIST:
		DECLARLIST DCL ';' {
		  cout << "<DECLARELIST 1>" << endl;
		  cout << "\t" << $2.dcl_type << endl;
		  // for DECLARLIST inside BLK - create variables and struct instances
		  createVariablesFromDCL(&$2, &$1);
		  $$.declarationList = $1.declarationList;
		  // for DECLARLIST inside TDEFS - create Types and insert to structTypeTable
		  if(createTypeFromDCL(&$2, &$1) == -1)
		    semanticError((string)"undefined field type detected: " + $2.dcl_type);
		  $$.typedefList = $1.typedefList;
		  $$.typesList = $1.typesList;
		  $$.typesList.push_back($2.dcl_type);
		  cout << "<\\DECLARELIST 1>" << endl;
		}
	|
		DCL ';' {
		  cout << "<DECLARELIST 2>" << endl;
		  // TODO: chack for struct self loop semantic error
		  cout << "\t" << $1.dcl_type << endl;
		  // for DECLARLIST inside BLK - create variables and struct instances
		  createVariablesFromDCL(&$1, &$$);
		  // for DECLARLIST inside TDEFS - create Types and insert to structTypeTable
		  createTypeFromDCL(&$1, &$$);
		  $$.typesList.push_back($1.dcl_type);
		  cout << "<\\DECLARELIST 2>" << endl;
		}
;		
DCL: 
		ID ':' TYPE {
		  cout << "<DCL 1>" << endl;
		  $$.dcl_type = $3.tokenValue;
		  $$.dcl_ids.push_front($1.tokenValue);
		  cout << "<\\DCL 1>" << endl;
		} 
	|
		ID ':' ID {
		  cout << "<DCL 2>" << endl;
		  if(validateStructName($3.tokenValue) == false){
		    semanticError("did not find declaration of type name: " + $3.tokenValue);
		  }
		  $$.dcl_type = $3.tokenValue;
		  $$.dcl_ids.push_front($1.tokenValue);
		  cout << "<\\DCL 2>" << endl;
		}
	|
		ID ',' DCL {
		  cout << "<DCL 3>" << endl;
		  $3.dcl_ids.push_front($1.tokenValue);
		  $$.dcl_ids.merge($3.dcl_ids);
		  $$.dcl_type = $3.dcl_type;
		  cout << "<\\DCL 3>" << endl;
		}
;	
TYPE: 
		Integer { 
		} // $$->tokenValue is already assigned in .lex file
	|
		Real {
		} // $$->tokenValue is already assigned in .lex file
;	
LIST: 
		LIST M STMT{  
		  $$.nextList = $3.nextList;
		  backpatch($1.nextList, $2.quad);
		  cout << "<\\LIST>" << endl;
		}
	|
		/*epsilon*/ {}
;	
STMT: 
		ASSN {
		  $$.nextList.push_back(nextquad());
		}
	|
		CNTRL {
		  cout << "<STMT 2>" << endl;
		  $$.nextList = $1.nextList;
		  cout << "<\\STMT 2>" << endl;
		}
	|
		READ {
		  $$.nextList.push_back(nextquad());
		}
	|
		WRITE {
		  $$.nextList.push_back(nextquad());
		}
	|
		STMT_RETURN {
		  //TODO???
		}
	|
		BLK {
		  cout << "<STMT 6>" << endl;
		  $$.nextList = $1.nextList;
		  cout << "<\\STMT 6>" << endl;
		}
;	
STMT_RETURN: 
		Return '(' EXP ')' ';' {
		  if($3.type != currFunction->returnType) {
		    semanticError("Ileagal type of return expression");
		  }
		  // fold stack back to FP
		  emit("ADD2I I1 I2 1");
		  
		  if($3.type == "integer") {
		    emit("STORI " + $3.place + " I1 0");
		  } else {
		    emit("STORR " + $3.place + " I1 0");
		  }
		  emit("RETRN");
		}
;	
WRITE: 
		Write '(' EXP ')' ';' {
		  string PRNT = "";
		  if($3.type == "integer") {
		    PRNT = "PRNTI ";
		  } else if($3.type == "real") {
		    PRNT = "PRNTR ";
		  }
		  emit(PRNT + $3.place);
		}
	|
		Write '(' STRING ')' ';' {
		  printString($3.tokenValue);
		}
;	
READ: 
		Read '(' LVAL ')' ';' {
			if(!isPrimitive($3.type)) {
				semanticError("Cannot read input into a non-primitive destination");
			}
			if($3.type == "integer") {
				string reg = currFunction->getIntReg();
				emit("READI " + reg);
				emit("STORI " + reg + " I2 -" + $3.offset);
			} else {
				string reg = currFunction->getRealReg();
				emit("READR " + reg);
				emit("STORR " + reg + " I2 -" + $3.offset);
			}
		}
;	
ASSN: 
		LVAL ASSIGN EXP ';' {
		  // TODO: this code needs to be reused in READ, so a function might be in order
		  cout << "<ASSN>" << endl;
		  Variable* lvalVar;
		  if($1.type != $3.type){
			semanticError("type mismatch on assignment operation: trying to assign " +
				  $3.type + " to " + $1.type);
		  }
		
		  string type = $1.type;
		  if(isPrimitive(type)) {
			if(type == "integer") {
				string reg = currFunction->getIntReg();
				emit("STORI " + $3.place + " I2 -" + $1.offset);
			} else {
				string reg = currFunction->getRealReg();
				emit("STORR " + $3.place + " I2 -" + $1.offset);
			}
		  } else { // Defstructs assignment
		    emit((string)"MULTI " + $3.place + " " + $3.place + " -1");
		    copyStruct($3.place, $1.variableInstance);
		  }
		  cout << "<\\ASSN>" << endl;
		}
;
LVAL: 
		ID {
		  cout << "<LVAL 1>" << endl;
		  Variable* lvalVar = currBlock->getScopeVariable($1.tokenValue);
		  if(!lvalVar)
			semanticError($1.tokenValue + " is not declared in this scope");
		  $$.type = lvalVar->getType();
		  $$.offset = to_string(lvalVar->getOffset());
		  $$.variableName = $1.tokenValue;
		  $$.variableInstance = lvalVar;
		  cout << "<\\LVAL 1>" << endl;
		}
	|
		STREF {
		  cout << "<LVAL 2>" << endl;
		  Variable* field = currBlock->getScopeDefstructStref($1.path);
		  if(!field)
			semanticError((string)"Invalid Defstruct dereference");
		  $$.type = field->getType();
		  $$.offset = to_string(field->getOffset());
		  $$.variableName = field->getName();
		  $$.variableInstance = field;
		  cout << "<\\LVAL 2>" << endl;
		}
;
CNTRL: 
		If BEXP Then M STMT N Else M STMT {
		  cout << "<CNTRL 1>" << endl;
		  cout << yylineno << endl;
		  backpatch($2.trueList, $4.quad);
		  backpatch($2.falseList, $8.quad);
		  $$.nextList.insert($$.nextList.end(), $5.nextList.begin(), $5.nextList.end());
		  $$.nextList.insert($$.nextList.end(), $6.nextList.begin(), $6.nextList.end());
		  $$.nextList.insert($$.nextList.end(), $9.nextList.begin(), $9.nextList.end());
		  cout << "<\\CNTRL 1>" << endl;
		}
	|
		If BEXP Then M STMT N{
		  cout << "<CNTRL 2>" << endl;
		  backpatch($2.trueList, $4.quad);
		  $$.nextList.insert($$.nextList.end(), $2.falseList.begin(), $2.falseList.end());
		  $$.nextList.insert($$.nextList.end(), $5.nextList.begin(), $5.nextList.end());
		  cout << "<\\CNTRL 2>" << endl;
		}
	|
		M_while While M BEXP Do M STMT {
		  //cout << "<CNTRL 3>" << endl;
		  backpatch($4.trueList, $6.quad);
		  backpatch($7.nextList, $3.quad);
		  $$.nextList.insert($$.nextList.end(), $4.falseList.begin(), $4.falseList.end());
		  emit((string)"UJUMP " + to_string($3.quad));
		  cout << "<\\CNTRL 3>" << endl;
		}
;	
BEXP: 
		BEXP OR_OP M BEXP {
		  cout << "<BEXP 1>" << endl;
		  backpatch($1.falseList, $3.quad);
		  $$.trueList.insert($$.trueList.end(), $1.trueList.begin(), $1.trueList.end());
		  $$.trueList.insert($$.trueList.end(), $4.trueList.begin(), $4.trueList.end());
		  $$.falseList.insert($$.falseList.end(), $4.falseList.begin(), $4.falseList.end());
		  cout << "<\\BEXP 1>" << endl;
		}
	|
		BEXP AND_OP M BEXP {
		  cout << "<BEXP 2>" << endl;
		  backpatch($1.trueList, $3.quad);
		  $$.falseList.insert($$.falseList.end(), $1.falseList.begin(), $1.falseList.end());
		  $$.falseList.insert($$.falseList.end(), $4.falseList.begin(), $4.falseList.end());
		  $$.trueList.insert($$.trueList.end(), $4.trueList.begin(), $4.trueList.end());
		  cout << "<\\BEXP 2>" << endl;
		}
	|
		EXP REL_OP EXP {
		  cout << "<BEXP 3>" << endl;
		  if(!(isPrimitive($1.type) && isPrimitive($3.type))) {
			semanticError("Cannot compare defstruct");
		  }
		  string tempReg = currFunction->getIntReg();
		  string SLET = "";
		  string SGRT = "";
		  string SEQU = "";
		  string SNEQ = "";
		  string opCommand = "";
		  
		  if($1.type == "integer" && $3.type == "integer") {
		    SLET = "SLETI";
		    SGRT = "SGRTI";
		    SEQU = "SEQUI";
		    SNEQ = "SNEQI";
		  } else if($1.type == "real" && $3.type == "real") {
		    SLET = "SLETR";
		    SGRT = "SGRTR";
		    SEQU = "SEQUR";
		    SNEQ = "SNEQR";		    
		  } else {
		    semanticError("type missmatch on relop \'" + $2.tokenValue + "\'");
		  }
		  
		  if($2.tokenValue == "<" || $2.tokenValue == "<=") {
		    opCommand = SLET;
		  } else if($2.tokenValue == ">" || $2.tokenValue == ">=") {
		    opCommand = SGRT;
		  } else if($2.tokenValue == "==") {
		    opCommand = SEQU;
		  } else if($2.tokenValue == "<>") {
		    opCommand = SNEQ;
		  } else {
		    semanticError("can't recognize RELOP " + $2.tokenValue);
		  }
		  
		  bool equalsFlag = false;
		  if($2.tokenValue == "<=" || $2.tokenValue == ">=") {
		    equalsFlag = true;
		  }
		  
		  emit(opCommand + " " + tempReg + " " + $1.place + " " + $3.place);
		  $$.trueList.push_back(nextquad());
		  emit("BNEQZ " + tempReg + " ___");
		  if(equalsFlag) {
		    // if tempReg == 0 we should continue down the flow (no jump needed)
		    emit(SEQU + " " + tempReg + " " + $1.place + " " + $3.place);
		    $$.trueList.push_back(nextquad());
		    emit("BNEQZ " + tempReg + " ___");
		  }
		  $$.falseList.push_back(nextquad());
		  emit((string)"UJUMP " + "___");
		  cout << "<\\BEXP 3>" << endl;
		}

	|
		NOT_OP BEXP {
		  cout << "<BEXP 4>" << endl;
		  $$.trueList.swap($$.falseList);
		  cout << "<\\BEXP 4>" << endl;
		}
	|
		'(' BEXP ')' {
		  cout << "<BEXP 5>" << endl;
		  $$.trueList = $2.trueList;
		  $$.falseList = $2.falseList;
		  cout << "<\\BEXP 5>" << endl;
		}
;

M:    		/*epsilon*/ {
                  $$.quad = nextquad();
		  cout << "<M>" << "quad=" << $$.quad << endl;
                }
;

N:    		/*epsilon*/ {
  		  cout << "<N>" << endl;
		  $$.nextList.push_back(nextquad());
		  emit((string)"UJUMP" + " ___");
                }
;

EXP: 
		EXP ADD_OP EXP {
		  cout << "<EXP 1>" << endl;
		  if(!isPrimitive($1.type) || !isPrimitive($3.type)) {
		    semanticError((string)"can not perform add/sub operation on " + $1.type + " and " + $3.type);
		  }

		  // EXP->place is always in register!
		  if(isUsedIntReg($1.place) && isUsedIntReg($3.place)) {
		    $$.place = currFunction->getIntReg();
		    emit("ADD2I " + $$.place + " " + $1.place + " " + $3.place);
			$$.type = "integer";
		  } else if(isUsedRealReg($1.place) && isUsedRealReg($3.place)) {
		    $$.place = currFunction->getRealReg();
		    emit("ADD2R " + $$.place + " " + $1.place + " " + $3.place);
		  } else {
		    semanticError("type missmatch within add operation");
		  }
		  $$.type = $1.type;
		  cout << "<\\EXP 1>" << endl;
		}
	|
		EXP MUL_OP EXP {
		  cout << "<EXP 2>" << endl;
		  if(!isPrimitive($1.type) || !isPrimitive($3.type)) {
		    semanticError("can not perform mul/div operation on defstruct");
		  }

		  if(isUsedIntReg($1.place) && isUsedIntReg($3.place)) {
		    $$.place = currFunction->getIntReg();
		    emit("MULTI " + $$.place + " " + $1.place + " " + $3.place);
		  } else if(isUsedRealReg($1.place) && isUsedRealReg($3.place)) {
		    $$.place = currFunction->getRealReg();
		    emit("MULTR " + $$.place + " " + $1.place + " " + $3.place);
		  } else {
		    semanticError("type missmatch within mul operation");
		  }
		  cout << "<\\EXP 2>" << endl;
		  $$.type = $1.type;
		}
	|
		'(' EXP ')' {
		  cout << "<EXP 3>" << endl;
		  $$.place = $2.place;
		  $$.type = $2.type;
		  cout << "<\\EXP 3>" << endl;
		}
	|
		'(' TYPE ')' EXP {
		  cout << "<EXP 4>" << endl;
		  if(!isPrimitive($4.type)){
			semanticError("Cannot cast defstruct");
		  }
		  if($2.tokenValue == "integer") {
		    if(isUsedIntReg($4.place)) {
		      $$.place = $4.place;
		    } else if(isUsedRealReg($4.place)) {
		      $$.place = currFunction->getIntReg();
		      emit("CRTOI " + $$.place + " " + $4.place);
		    }
			$$.type = "integer";
		  } else if($2.tokenValue == "real") {
		    if(isUsedRealReg($4.place)) {
		      $$.place = $4.place;
		    } else if(isUsedIntReg($4.place)) {
		      $$.place = currFunction->getRealReg();
		      emit("CITOR " + $$.place + " " + $4.place);
		    }
			$$.type = "real";
		  } else {
		    semanticError("undefined explicit cast");
		  }
		  cout << "<\\EXP 4>" << endl;
		}
	|
		ID {
		  cout << "<EXP 5>" << endl;
		  // make sure ID is a variable in current scope
		  Variable* var = currBlock->getScopeVariable($1.tokenValue);
		  if(!var)
			semanticError($1.tokenValue + " is not declared in this scope");
		  copyVariableToRegister(var, &$$);
		  cout << "<\\EXP 5>" << endl;
		}
	|
		STREF {
		  cout << "<EXP 6>" << endl;
		  Variable* field = currBlock->getScopeDefstructStref($1.path);
		  if(!field)
			semanticError((string)"Invalid Defstruct dereference");
		  copyVariableToRegister(field, &$$);
		  cout << "<\\EXP 6>" << endl;
		}
	|
		NUM {
		  cout << "<EXP 7>" << endl;
		  if(isInteger($1.tokenValue)) {
		    $$.type = "integer";
		    $$.place = currFunction->getIntReg();
		    emit("COPYI " + $$.place + " " + $1.tokenValue);
		  }
		  else {
		    $$.type = "real";
		    $$.place = currFunction->getRealReg();
		    emit("COPYR " + $$.place + " " + $1.tokenValue);
		  }
		  cout << "<\\EXP 7>" << endl;
		}
	|
		CALL {
		  cout << "<EXP 8>" << endl;
		  $$.type = $1.type;
		  cout << "<\\EXP 8>" << endl;
		}
;	
STREF: 
		ID '[' ID ']' {
		  // check if $1 is a variable of type defstruct
		  Variable* var = currBlock->getScopeVariable($1.tokenValue);
		  if(!var) {
		    semanticError($1.tokenValue + (string)" is undeclared in this scope");
		  }
		  if(isPrimitive(var->getType())) {
		    semanticError($1.tokenValue + " of type " + var->getType() + " is not subscriptable");	
		  }
		  $$.path.push_back($1.tokenValue);
		  $$.path.push_back($3.tokenValue);
		}
|
		STREF '[' ID ']' {
		  $$.path = $1.path;
		  $$.path.push_back($3.tokenValue);
		  
		  //************************************************************************************************************
		}
;	
CALL: 
		Call ID '(' CALL_ARGS_FULL ')' {
		  Function* func = getFunction($2.tokenValue);
		  if(!func) {
		    semanticError($2.tokenValue + " is not callable");
		  }
		  string err = func->validateCallArguments($4.callArgsList);
		  if(err != "") {
		    semanticError("Illeagal function call: " + err);
		  }
		  saveUsedRegisters();
		  // save I0 and I2, return address and Frame Pointer
		  emit("STORI I0 I1 0"); // MEM[SP+0] = RA (return address)
		  emit("STORI I2 I1 -1"); // MEM[SP+1] = FP
		  emit("SUBTI I1 I1 3"); // SP = SP-3 (2 registers and leave empty space for return value)
		  
		  emit("COPYI I2 I1"); // FP = SP
		  
		  func->putArgumentsOnStack($4.callArgsList);
		  emit("SUBTI I1 I1 1");
		  
		  if(!func->isImplemented) {
		    func->functionCalls.push_back(nextquad());
  		  }
		  emit("JLINK " + to_string(func->address));
		  // after return (SP points to return value)
		  string LOAD = "";
		  if(func->returnType == "integer") {
		    $$.place = currFunction->getIntReg();
			$$.type = "integer";
			LOAD = "LOADI";
	      } else if(func->returnType == "real") {
		    $$.place = currFunction->getRealReg();
			$$.type = "real";
			LOAD = "LOADR";
		  }
		  emit(LOAD + " " + $$.place + " I1 0");
		  emit("LOADI I2 I1 1");
		  emit("LOADI I0 I1 2");
		  emit("ADD2I I1 I1 3");
		  restoreUsedRegisters();
		  
		}
;	
CALL_ARGS_FULL: 
		CALL_ARGS {
		  $$.callArgsList = $1.callArgsList;
		}
	|
		/*epsilon*/ {}
;	
CALL_ARGS:
		EXP {
		  // TODO: make sure CALL_ARGS.place is register with expression value
		  if(!isPrimitive($1.type)) {
		    semanticError("Can't pass 'defstruct' as function parameter");
		  }
		  cout << "argument type " << $1.type << endl;
		  $$.callArgsList.push_back($1.place);
		}
	|
		CALL_ARGS ',' EXP {
		  if(!isPrimitive($3.type)) {
		    semanticError("Can't pass 'defstruct' as function parameter");
		  }
		  cout << "argument type " << $1.type << endl;
		  $1.callArgsList.push_back($3.place);
		  $$.callArgsList = $1.callArgsList;
		}
;

M_program:      /*epsilon*/ {cout << "<PROGRAM>" << endl;};
M_main:         /*epsilon*/ {cout << "<MAIN_FUNCTION>" << endl;};
M_blk:          /*epsilon*/ {cout << "<BLK>" << endl;};
M_while:        /*epsilon*/ {cout << "<CNTRL 3>" << endl;};

%%

void yyerror (char const *err){
   printf("Syntax error: '%s' in line number %d\n", yytext, yylineno);
   exit(1);
}

void semanticError(string s) {
  printf("Semantic error: '%s' in line number %d\n", s.c_str(), yylineno);
  exit(1);
}
